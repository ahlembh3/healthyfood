{% extends 'base.html.twig' %}

{% block title %}Ajouter une recette{% endblock %}
{% block page_title %}Ajouter une recette{% endblock %}

{% block content %}
    <section class="container-content py-4">
        {% include 'recette/_form.html.twig' with {
            button_label: 'Créer',
            form_title: 'Ajouter une recette'
        } %}

        <div class="d-flex justify-content-between mt-4">
            <a href="{{ is_granted('ROLE_ADMIN') ? path('recette_liste_admin') : path('recette_mes_recettes') }}"
               class="btn btn-outline-secondary">
                Retour à la liste
            </a>
        </div>
    </section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        (function () {
            // ---------- helpers ----------
            function slug(str){return (str||'').toString().normalize('NFD').replace(/\p{Diacritic}/gu,'').toLowerCase().replace(/\s+/g,' ').trim();}

            function updateUnitForWrapper(wrapper){
                const ingSelect = wrapper.querySelector('.ingredient-select');
                const qtyInput  = wrapper.querySelector('.ingredient-quantite');
                if (!ingSelect || !qtyInput) return;
                const opt  = ingSelect.options[ingSelect.selectedIndex];
                const unit = opt && opt.value ? (opt.getAttribute('data-unit') || 'unité') : 'unité';
                qtyInput.placeholder = `Quantité (${unit})`;
                let hint = wrapper.querySelector('.unit-hint');
                if (!hint) {
                    hint = document.createElement('small');
                    hint.className = 'text-muted unit-hint ms-2 d-inline-block';
                    qtyInput.insertAdjacentElement('afterend', hint);
                }
                hint.textContent = unit;
            }

            function filterIngredientOptions(wrapper){
                const typeSelect = wrapper.querySelector('.ingredient-type');
                const ingSelect  = wrapper.querySelector('.ingredient-select');
                if (!typeSelect || !ingSelect) return;

                const wanted = slug(typeSelect.value);
                const opts   = ingSelect.options;
                let selectedOk = false;

                for (let i=0;i<opts.length;i++){
                    const o = opts[i];
                    if (!o.value) { o.hidden=false; o.disabled=false; continue; }
                    const t = slug(o.getAttribute('data-type')||'');
                    const show = !wanted || t === wanted;
                    o.hidden = !show;
                    o.disabled = !show;
                    if (o.selected && show) selectedOk = true;
                }
                if (!selectedOk) ingSelect.value = '';
                updateUnitForWrapper(wrapper);
            }

            function addBlock(list){
                const index   = Number(list.dataset.index || 0);
                const html    = list.dataset.prototype.replace(/__name__/g, index);
                const wrapper = document.createElement('div');
                wrapper.className = 'ingredient-item border rounded p-3 mb-3 position-relative';
                wrapper.innerHTML = html + '<button type="button" class="btn btn-sm btn-outline-danger position-absolute top-0 end-0 m-2" data-remove-ingredient>&times;</button>';
                list.appendChild(wrapper);
                list.dataset.index = String(index + 1);
                // init
                filterIngredientOptions(wrapper);
                updateUnitForWrapper(wrapper);
            }

            function bindOnce(){
                if (window.__recetteFormBound) return;   // garde anti-duplication (Turbo)
                window.__recetteFormBound = true;

                // clicks add/remove (délégation)
                document.addEventListener('click', function(e){
                    if (e.target.matches('[data-add-ingredient]')) {
                        e.preventDefault();
                        const list = document.querySelector('[data-ingredients]');
                        if (list) addBlock(list);
                    } else if (e.target.matches('[data-remove-ingredient]')) {
                        e.preventDefault();
                        const item = e.target.closest('.ingredient-item');
                        if (item) item.remove();
                    }
                });

                // changements type/ingrédient => filtrage+unité
                document.addEventListener('change', function(e){
                    if (e.target.matches('.ingredient-type')) {
                        const w = e.target.closest('.ingredient-item') || document;
                        filterIngredientOptions(w);
                        updateUnitForWrapper(w);
                    } else if (e.target.matches('.ingredient-select')) {
                        const w = e.target.closest('.ingredient-item') || document;
                        updateUnitForWrapper(w);
                    }
                });

                // init liste
                const list = document.querySelector('[data-ingredients]');
                if (list) {
                    const items = list.querySelectorAll('.ingredient-item');
                    list.dataset.index = String(items.length);
                    if (items.length === 0) { addBlock(list); }            // toujours 1 bloc au minimum
                    items.forEach(w => { filterIngredientOptions(w); updateUnitForWrapper(w); });
                }
            }

            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', bindOnce, { once:true });
            } else { bindOnce(); }
            document.addEventListener('turbo:load', bindOnce);
        })();

        // aperçu image (existant)
        function previewImage(event){
            const input   = event.target;
            const preview = document.getElementById('imagePreview');
            if (!preview) return;
            if (input.files && input.files[0]) {
                const r = new FileReader();
                r.onload = (e)=>{ preview.src = e.target.result; preview.classList.remove('d-none'); };
                r.readAsDataURL(input.files[0]);
            } else {
                const original = preview.dataset.originalSrc || '#';
                preview.src = original;
                if (original === '#') preview.classList.add('d-none');
            }
        }
    </script>
{% endblock %}
